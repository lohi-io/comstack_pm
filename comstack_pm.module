<?php

/**
 * @file
 * comstack_pm.module
 */

// All logic relating to how this module specifically operates will go in here.
include_once __DIR__ . '/includes/comstack_pm.comstack_pm.inc';
// Other stuffs.
// Actions.
include_once __DIR__ . '/includes/comstack_pm.actions.inc';
// Devel.
include_once __DIR__ . '/includes/comstack_pm.devel.inc';
// Drush rebuild commands.
include_once __DIR__ . '/includes/comstack_pm.drush.inc';
// Entity info, metadata info and load callbacks.
include_once __DIR__ . '/includes/comstack_pm.entity.inc';
// Form builder callbacks, including validate, alters and submits.
include_once __DIR__ . '/includes/comstack_pm.forms.inc';

/**
 * Implements hook_permission().
 */
function comstack_pm_permission() {
  $permissions = array(
    'administer comstack_pm settings' => array(
      'title' => t('Administer Communications Stack Private Messaging settings'),
      'description' => t('Allows a user to force read only mode on to users of Private messaging.'),
      'restrict access' => TRUE,
    ),
    'bypass comstack_pm access checks' => array(
      'title' => t('Bypass conversation &amp; message access checks'),
      'description' => t('Allows a user to perform any operations against conversations and messages, with exception of view deleted conversations &amp; messages.'),
      'restrict access' => TRUE,
    ),
    'view deleted comstack conversations' => array(
      'title' => t('View conversations which have been marked as deleted'),
      'description' => t('Allows users to view conversations which have been marked as deleted.'),
      'restrict access' => TRUE,
    ),
    'start new comstack conversations' => array(
      'title' => t('Start new conversations'),
      'description' => t('Allows users to start new conversations with each-other.'),
    ),
    'delete leave comstack conversation' => array(
      'title' => t('Delete/Leave a conversation'),
      'description' => t("Allows users to leave conversations. It wouldn't appear in their inbox, but other participants retain it. Only people who are participants in the conversation can delete it."),
    ),
    'invite users to a comstack conversation' => array(
      'title' => t('Invite users to a conversation'),
      'description' => t('Allows users to invite other users who are not part of the conversation to it.'),
    ),
    'set a comstack conversations title' => array(
      'title' => t('Set a conversations title'),
      'description' => t("Allows users to set the title of conversations that they're part of."),
    ),
    'mark a comstack conversation as read' => array(
      'title' => t('Mark a conversation as read'),
      'description' => t('Allows users to mark a conversation as read. This permission allows users to reverse the action too.'),
    ),
    'mute a comstack conversation' => array(
      'title' => t('Mute a conversation'),
      'description' => t('Allows users to mute a conversation suppressing any notifications from it. This permission allows users to reverse the action too.'),
    ),
    'archive a comstack conversation' => array(
      'title' => t('Archive a conversation'),
      'description' => t('Allows users to archive a conversation. This permission allows users to reverse the action too.'),
    ),
    'pin a comstack conversation' => array(
      'title' => t('Pin a conversation'),
      'description' => t('Allows users to pin a conversation. This permission allows users to reverse the action too.'),
    ),
    'star a comstack conversation' => array(
      'title' => t('Star a conversation'),
      'description' => t('Allows users to star a conversation. This permission allows users to reverse the action too.'),
    ),
    'reply to a comstack conversation' => array(
      'title' => t('Can reply to conversations'),
      'description' => t("Allows users to reply (post new messages) to a conversation they're part of."),
    ),
    'edit own comstack conversation messages' => array(
      'title' => t('Edit own messages in a conversation'),
      'description' => t("Allows users to edit their own messages from a conversation that they're part of."),
    ),
    'delete own comstack conversation messages' => array(
      'title' => t('Delete own messages in a conversation'),
      'description' => t("Allows users to delete their own messages from a conversation that they're part of. Whether or not they're permanently deleted is defined by settings."),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function comstack_pm_menu() {
  $items = array();
  $includes_dir = drupal_get_path('module', 'comstack_pm') . '/includes';

  $items['admin/structure/comstack/settings/private-messaging'] = array(
    'title' => 'Private Messaging',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comstack_pm_admin_settings_form'),
    'access arguments' => array('administer comstack_pm settings'),
  );

  return $items;
}

/**
 * Implements hook_user_preferences().
 */
function comstack_pm_user_preferences() {
  $preferences = array();

  if (variable_get('comstack_pm_preferences__enabled__provide', FALSE)) {
    $preferences['comstack_pm_enabled'] = array(
      'title' => t('Comstack Private Messaging - Enabled'),
      'default_value' => variable_get('comstack_pm_preferences__enabled__default', 1),
      'form_ids' => array('user_profile_form'),
      'form_item' => array(
        '#title' => t('Allow people to send me private messages'),
        '#description' => t("When enabled, people can send you private messages. If you disable this they won't be able to contact you, but any existing conversations will remain unless you choose to delete them."),
        '#type' => 'checkbox',
        '#weight' => 1,
      ),
    );
  }

  return $preferences;
}

/**
* Implements hook_views_api().
*/
function comstack_pm_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'comstack_pm') . '/views',
  );
}

/**
 * Implements hook_user_cancel().
 */
function comstack_pm_user_cancel($edit, $account, $method) {
  switch ($method) {
    /**
     * Remove a user and unpublish their content, we mark the private messaging
     * content as deleted in this case.
     */
    case 'user_cancel_block_unpublish':
      db_update('comstack_conversation_user')
        ->fields(array(
          'deleted' => 1,
        ))
        ->condition('uid', $account->uid)
        ->execute();
      db_update('message')
        ->fields(array(
          'deleted' => 1,
        ))
        ->condition('type', 'cs_pm')
        ->condition('uid', $account->uid)
        ->execute();
      db_update('comstack_conversation_message')
        ->fields(array(
          'deleted' => 1,
        ))
        ->condition('uid', $account->uid)
        ->execute();
      break;

    /**
     * Remove a user and re-assign all of their content to the anonymous user
     * (UID 0).
     */
    case 'user_cancel_reassign':
      /**
       * Update any conversations.
       */
      db_update('comstack_conversation_user')
        ->fields(array(
          'uid' => 0,
        ))
        ->condition('uid', $account->uid)
        ->execute();

      /**
       * And any messages relating to private messaging.
       */
      db_update('message')
        ->fields(array(
          'uid' => 0,
        ))
        ->condition('type', 'cs_pm')
        ->condition('uid', $account->uid)
        ->execute();
      db_update('comstack_conversation_message')
        ->fields(array(
          'uid' => 0,
        ))
        ->condition('uid', $account->uid)
        ->execute();

      /**
       * Worth mentioning that any entity references will be dereferenced by
       * entityreference.
       */

      break;
  }
}

/**
 * Implements hook_user_delete().
 */
function comstack_pm_user_delete($account) {
  /**
   * Grab a list of conversations that this user started.
   */
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'comstack_conversation')
    ->fieldCondition('cs_pm_started_by', 'target_id', $account->uid)
    ->addMetaData('account', $account);
  $conversations_by_user_query = $query->execute();
  $conversations_by_user = isset($conversations_by_user_query['comstack_conversation']) ? array_keys($conversations_by_user_query['comstack_conversation']) : array();

  if (!empty($conversations_by_user)) {
    db_delete('comstack_conversation_user')
      ->condition('conversation_id', $conversations_by_user, 'IN')
      ->execute();

    entity_delete_multiple('comstack_conversation', $conversations_by_user);

    /**
     * Allow other modules to react to conversations being deleted.
     */
    module_invoke_all('comstack_pm_conversations_permanently_deleted', $conversations_by_user);
  }

  /**
   * Delete all other user related data.
   */
  db_delete('comstack_conversation_user')
    ->condition('uid', $account->uid)
    ->execute();

  db_delete('comstack_conversation_message')
    ->condition('uid', $account->uid)
    ->execute();

  /**
   * Get a list of message IDs to delete by the user and do so.
   */
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'message')
    ->propertyCondition('uid', $account->uid)
    ->addMetaData('account', $account);
  $messages_by_user_query = $query->execute();
  $messages_by_user = isset($messages_by_user_query['message']) ? array_keys($messages_by_user_query['message']) : array();

  if (!empty($messages_by_user)) {
    message_delete_multiple($messages_by_user);
  }
}

/**
 * Implements hook_action_info().
 */
function comstack_pm_action_info() {
  return array(
    'comstack_pm_permanently_delete_conversation' => array(
      'type' => 'comstack_conversation',
      'label' => t('Delete conversation'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'behavior' => array('deletes_property'),
      'triggers' => array('any'),
    ),
  );
}
