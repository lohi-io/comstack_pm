<?php
/**
 * @file
 * Provides installation details for Communications Stack Private Messaging.
 */

/**
 * Implements hook_schema().
 */
function comstack_pm_schema() {
  $schema = array();

  $schema['comstack_conversation'] = array(
    'description' => 'The base table for conversations sent via the Communications Stack.',
    'fields' => array(
      'conversation_id' => array(
        'description' => 'The primary identifier for this conversation.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'container' => array(
        'description' => 'The machine name of the container e.g. Folder this conversation lives in.',
        'type' => 'varchar',
        'length' => '128',
        'not null' => TRUE,
        'default' => '',
      ),
      'started' => array(
        'description' => 'The Unix timestamp when the message was started.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated' => array(
        'description' => 'The Unix timestamp when the message was last updated.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'The title, subject or name of the conversation.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'started' => array('started'),
      'updated' => array('updated'),
    ),
    'foreign keys' => array(),
    'primary key' => array('conversation_id'),
  );

  $schema['comstack_conversation_user'] = array(
    'description' => 'Linkage between a conversation and the recipients/participants read state.',
    'fields' => array(
      'ccuid' => array(
        'description' => 'The primary identifier for this record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'conversation_id' => array(
        'description' => 'The ID of the conversation the entity (typically user) is a part of.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The ID of the user related to this record.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'unread_count' => array(
        'description' => 'Number of messages in this conversation which are unread.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'delivered' => array(
        'description' => 'Boolean indicating whether the most recent message(s) have been delivered this conversation participant.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'muted' => array(
        'description' => 'Boolean indicating whether updates in this conversation should alert the destination entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'forwarded' => array(
        'description' => 'Boolean indicating whether this conversation has been forwarded by the participant entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'starred' => array(
        'description' => 'Boolean indicating whether this conversation has been starred by the participant entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'pinned' => array(
        'description' => 'Boolean indicating whether this conversation is pinned.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'archived' => array(
        'description' => 'Boolean indicating whether this conversation has been archives.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
      'deleted' => array(
        'description' => 'Boolean indicating whether this conversation is marked as deleted.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
    ),
    'indexes' => array(
      'conversation_id' => array('conversation_id'),
      'uid' => array('uid'),
      'unread_count' => array('unread_count'),
      'pinned' => array('pinned'),
      'deleted' => array('deleted'),
    ),
    'foreign keys' => array(
      'conversation' => array(
        'table' => 'comstack_conversation',
        'columns' => array('conversation_id' => 'conversation_id'),
      ),
      'participant' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'primary key' => array('ccuid'),
  );

  $schema['comstack_conversation_message'] = array(
    'description' => 'Storage for when a message type requires that a conversation keeps separate histories for each participant. This stores the link between the conversation version and message.',
    'fields' => array(
      'ccmid' => array(
        'description' => 'The primary identifier for this record.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'conversation_id' => array(
        'description' => 'The ID of the conversation the entity (typically user) is a part of.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => 'The ID of the user related to this record.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'mid' => array(
        'description' => 'The ID of the message.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'deleted' => array(
        'description' => 'Boolean indicating whether this conversation is marked as deleted.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'boolean' => TRUE,
      ),
    ),
    'indexes' => array(
      'conversation_id' => array('conversation_id'),
      'uid' => array('uid'),
      'mid' => array('mid'),
    ),
    'foreign keys' => array(
      'conversation' => array(
        'table' => 'comstack_conversation',
        'columns' => array('conversation_id' => 'conversation_id'),
      ),
      'participant' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'message' => array(
        'table' => 'message',
        'columns' => array('mid' => 'mid'),
      ),
    ),
    'primary key' => array('ccmid'),
  );

  $schema['comstack_message_edits'] = array(
    'description' => 'Record a history of message edits.',
    'fields' => array(
      'mid' => array(
        'description' => 'The ID of the message.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp when the message was edited.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'text' => array(
        'description' => 'The message text.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'format' => array(
        'description' => 'The input format being used.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'mid' => array('mid'),
    ),
    'foreign keys' => array(
      'message' => array(
        'table' => 'message',
        'columns' => array('mid' => 'mid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_schema_alter().
 */
function comstack_pm_schema_alter(&$schema) {
  $schema['message']['fields']['edits'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
    'unsigned' => TRUE,
    'description' => 'A small integer field which notes how many times this message has been edited, max value of 127.',
  );
}

/**
 * Implements hook_install().
 */
function comstack_pm_install() {
  // If the edits field hasn't been thrown on the message schema, do it.
  if (!db_field_exists('message', 'edits')) {
    $schema = drupal_get_schema('message');
    db_add_field('message', 'edits', $schema['fields']['edits']);
  }

  // Chuck in our input format.
  comstack_pm_install_input_formats();

  // Install the conversation fields.
  comstack_pm_install_conversation_fields();

  // Setup the comstack_pm comstack message type.
  comstack_pm_install_entities();

  // Add in the fields for the message entities.
  comstack_pm_install_message_fields();
}

/**
 * Implements hook_uninstall().
 */
function comstack_pm_uninstall() {
  // Remove variables.
  variable_del('comstack_pm_type');
  variable_del('comstack_pm_c_delete_behaviour');
  variable_del('comstack_pm_input_format');
  variable_del('comstack_pm_preferences__enabled__default');
  variable_del('comstack_pm_preferences__enabled__null_as_true');
  variable_del('comstack_pm_preferences__enabled__provide');
  variable_del('comstack_pm_record_message_edits');
  variable_del('comstack_pm_record_separate_transcripts');
  variable_del('comstack_pm_max_participants');
  variable_del('comstack_pm_allow_separate_conversations');

  // Remove schema alterations.
  if (db_field_exists('message', 'edits')) {
    db_drop_field('message', 'edits');
  }

  // Remove fields from the conversation entity.
  $fields = array('cs_pm_participants', 'cs_pm_historical_participants', 'cs_pm_started_by', 'cs_pm_last_updated_by', 'cs_pm_last_message');
  foreach ($fields as $field) {
    $instance = field_info_instance('comstack_conversation', $field, 'comstack_conversation');
    field_delete_instance($instance);
    field_delete_field($field);
  }

  // Remove fields from the message type.
  $fields = array('cs_pm_conversation', 'cs_pm_text');
  foreach ($fields as $field) {
    $instance = field_info_instance('message', $field, 'cs_pm');
    field_delete_instance($instance);
    field_delete_field($field);
  }
}

/**
 * Create the necessary entity reference fields on the comstack_conversation
 * entity.
 *
 * https://www.drupal.org/node/1264160#comment-7985971
 */
function comstack_pm_install_conversation_fields() {
  $t = get_t();

  $fields = array(
    'cs_pm_participants' => array(
      'label' => $t('Participants'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    ),
    'cs_pm_historical_participants' => array(
      'label' => $t('Historical participants'),
      'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    ),
    'cs_pm_started_by' => array(
      'label' => $t('Started by'),
      'cardinality' => 1,
    ),
    'cs_pm_last_updated_by' => array(
      'label' => $t('Last updated by'),
      'cardinality' => 1,
    ),
  );

  foreach ($fields as $field_name => $details) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'entityreference',
      'module' => 'entityreference',
      'cardinality' => $details['cardinality'],
      'entity_types' => array(),
      'settings' => array(
        'handler' => 'base',
        'handler_settings' => array(
          'behaviors' => array(
            'views-select-list' => array(
              'status' => 0,
            ),
          ),
          'sort' => array(
            'type' => 'none',
          ),
          'target_bundles' => array(),
        ),
        'target_type' => 'user',
      ),
      'foreign keys' => array(
        'users' => array(
          'columns' => array(
            'target_id' => 'uid',
          ),
          'table' => 'users',
        ),
      ),
      'indexes' => array(
        'target_id' => array(
          0 => 'target_id',
        ),
      ),
      'locked' => 1,
      'translatable' => 0,
      'active' => 1,
      'deleted' => 0,
    );
    field_create_field($field);

    $instance = array(
      'bundle' => 'comstack_conversation',
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 5,
        ),
      ),
      'entity_type' => 'comstack_conversation',
      'field_name' => $field_name,
      'label' => $details['label'],
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'entityreference',
        'settings' => array(
          'match_operator' => 'CONTAINS',
          'path' => '',
          'size' => 60,
        ),
        'type' => 'entityreference_autocomplete',
        'weight' => 3,
      ),
    );
    field_create_instance($instance);
  }

  comstack_pm_install_conversation_fields_last_message();
}

/**
 * Install the message entity reference field on the conversation entity.
 */
function comstack_pm_install_conversation_fields_last_message() {
  $t = get_t();
  $field = array(
    'field_name' => 'cs_pm_last_message',
    'type' => 'entityreference',
    'module' => 'entityreference',
    'cardinality' => 1,
    'entity_types' => array(),
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array('cs_pm'),
      ),
      'target_type' => 'message',
    ),
    'foreign keys' => array(
      'message' => array(
        'columns' => array(
          'target_id' => 'mid',
        ),
        'table' => 'message',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 1,
    'translatable' => 0,
    'active' => 1,
    'deleted' => 0,
  );
  field_create_field($field);

  $instance = array(
    'bundle' => 'comstack_conversation',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 5,
      ),
    ),
    'entity_type' => 'comstack_conversation',
    'field_name' => 'cs_pm_last_message',
    'label' => $t('Last message'),
    'required' => 0,
    'widget' => array(
      'active' => 1,
      'module' => 'entityreference',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'path' => '',
        'size' => 60,
      ),
      'type' => 'entityreference_autocomplete',
      'weight' => 3,
    ),
  );
  field_create_instance($instance);
}

/**
 * Create the message and comstack_message_type entities.
 */
function comstack_pm_install_entities() {
  $message_type = entity_import('message_type', '{
    "name" : "cs_pm",
    "description" : "Private Messaging",
    "argument_keys" : [],
    "argument" : [],
    "category" : "message_type",
    "data" : {
      "token options" : { "clear" : 0 },
      "purge" : { "override" : 0, "enabled" : 0, "quota" : "", "days" : "" }
    },
    "language" : "",
    "arguments" : null,
    "message_text" : { "und" : [ { "value" : "-", "format" : "cs_pm", "safe_value" : "-" } ] },
    "rdf_mapping" : []
  }');
  if (!entity_load_single('message_type', 'cs_pm')) {
    entity_save('message_type', $message_type);
  }

  $comstack_message_type = entity_import('comstack_message_type', '{
    "type" : "cs_pm",
    "label" : "Private Messaging",
    "structure" : "flat",
    "conversation_record_separate_transcripts" : "1",
    "subject" : "0",
    "template" : "0",
    "template_text" : "",
    "user_preferences" : "0",
    "flood_control" : "0",
    "flood_control_interval" : "3600",
    "flood_control_limit" : "50",
    "store_last_read_time" : "0",
    "record_read_receipts" : "0",
    "record_read_receipts_perm" : "0",
    "record_read_receipts_default" : "1",
    "input_methods" : null,
    "delivery_methods" : { "email" : "email" },
    "ui_settings" : null,
    "notification_settings" : null,
    "grouping" : "0",
    "groups" : [],
    "actions" : "0",
    "rdf_mapping" : []
  }');
  if (!entity_load_single('comstack_message_type', 'cs_pm')) {
    entity_save('comstack_message_type', $comstack_message_type);
  }
}

/**
 * Add fields to the comstack private messaging message entity.
 */
function comstack_pm_install_message_fields() {
  $field = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'cs_pm_conversation',
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'target_type' => 'comstack_conversation',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );
  field_create_field($field);

  $field = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'cs_pm_text',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'text_long',
  );
  field_create_field($field);

  $instance = array(
    'bundle' => 'cs_pm',
    'default_value' => NULL,
    'default_value_function' => '',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => FALSE,
        ),
        'type' => 'entityreference_label',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'message',
    'field_name' => 'cs_pm_conversation',
    'label' => 'Conversation',
    'required' => 1,
    'settings' => array(
      'behaviors' => array(
        'prepopulate' => array(
          'status' => 0,
        ),
      ),
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'entityreference',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'path' => '',
        'size' => 60,
      ),
      'type' => 'entityreference_autocomplete',
      'weight' => 1,
    ),
  );
  field_create_instance($instance);

  $instance = array(
    'bundle' => 'cs_pm',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 1,
      ),
    ),
    'entity_type' => 'message',
    'field_name' => 'cs_pm_text',
    'label' => 'Text',
    'required' => 1,
    'settings' => array(
      'better_formats' => array(
        'allowed_formats' => array(
          'cs_pm' => 'cs_pm',
        ),
        'allowed_formats_toggle' => 1,
        'default_order_toggle' => 0,
        'default_order_wrapper' => array(
          'formats' => array(
            'cs_pm' => array(
              'weight' => 0,
            ),
          ),
        ),
      ),
      'text_processing' => 1,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'atjs_fieldset' => array(
          'atjs' => 0,
          'atjs_listeners' => array(
            'harmony_users' => 0,
          ),
        ),
        'rows' => 3,
      ),
      'type' => 'text_textarea',
      'weight' => 2,
    ),
  );
  field_create_instance($instance);
}

/**
 * Install input formats, we could've used features but nah, this means that
 * the format can be altered or deleted without resulting in conflicts.
 */
function comstack_pm_install_input_formats() {
  $formats_cs_pm = array(
    'format' => 'cs_pm',
    'name' => 'Comstack Private Messaging',
    'cache' => 1,
    'status' => 1,
    'weight' => 0,
    'filters' => array(
      'filter_htmlcorrector' => array(
        'weight' => -50,
        'status' => 1,
        'settings' => array(),
      ),
      'filter_html_escape' => array(
        'weight' => -49,
        'status' => 1,
        'settings' => array(),
      ),
      'filter_url' => array(
        'weight' => -43,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 72,
        ),
      ),
      'filter_autop' => array(
        'weight' => -40,
        'status' => 1,
        'settings' => array(),
      ),
    ),
  );

  $formats_cs_pm = (object) $formats_cs_pm;
  filter_format_save($formats_cs_pm);

  // Setup the permission.
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('use text format cs_pm'));
}

/* Update hooks. */

/**
 * Add an entity reference field on to the conversation entity for "last
 * message".
 */
function comstack_pm_update_7100() {
  comstack_pm_install_conversation_fields_last_message();
}

/**
 * Install a Comstack Private Messaging specific input format.
 */
function comstack_pm_update_7101() {
  comstack_pm_install_input_formats();
}
